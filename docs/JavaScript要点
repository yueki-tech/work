■配列の操作とアロー関数
'use strict';
{
    const scores = [80, 90, 40, 70];
    scores.forEach((score, idx) => {
        console.log(`Score ${idx} : ${score}`)
    });

    const prices = [180, 190, 200];
    // const updatePrices = prices.map((price) => {
    //     return price + 20;
    // });
    const updatePrices = prices.map(price => price + 20);
    console.log(updatePrices);

    const calcTax = money => money * 1.1;
    const total = calcTax(100);
    console.log(total);

    const numbers = [1, 4, 7, 8, 10];
    const evenNumbers = numbers.filter(number => 
      number % 2 === 0
      // {
      //   if (number % 2 === 0) {
      //     return true;
      //   } else {
      //     return false;
      //   }
      // }
    );
    console.log(evenNumbers);
}


■オブジェクトの要素にアクセスするサンプル
'use strict';
{
  // オブジェクト
  const point = {
    x: 100,
    y: 180,
  }

  // オブジェクトのキー値を配列にセット
  const keys = Object.keys(point);

  keys.forEach(key => {
    console.log(`key: ${key} value: ${point[key]}`);
  })

  const points = [
    {x: 30, y: 20},
    {x: 10, y: 50},
    {x: 40, y: 40},
  ];
  console.log(points[1].y);
}

■スプレッド構文の操作
'use strict';
{
  // オブジェクト
  const otherProps = {
    r: 4,
    color: 'red',
  }

  const point = {
    x: 100, 
    y: 180,
    ...otherProps,
  };

  // console.log(point);

  const {x, r, ...others} = point;
  console.log(x);
  console.log(r);
  console.log(others);
}

■日付操作
　new Date()で作成。
　■時間取得
　　・getTime()はタイムゾーンに依存しない数値型の値
　　・getHour()やgetMinute()などはタイムゾーンに依存する値
　■日時整形
'use strict';
{
  const d = [2019, 11, 14];

  console.log(d.join('/'));
  console.log(d.join(' '));

  const t = '17:08:24';
  console.log(t.split(':'));
  
  const [hour, minute, second] = t.split(':');
  console.log(hour);
  console.log(minute);
  console.log(second);
}






